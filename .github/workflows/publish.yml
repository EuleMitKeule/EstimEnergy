name: Publish

on:
  release:
    types:
      - published
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VERSION: ""

jobs:

  version:
    runs-on: ubuntu-latest
    steps:
      - name: Get version from release
        if: github.event_name == 'release'
        run: |
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

      - name: Get version from API
        if: github.event_name == 'workflow_dispatch'
        id: release_api
        uses: octokit/request-action@v2
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Set VERSION env variable
        run: |
          echo "VERSION=${{ steps.release_api.outputs.data.tag_name }}" >> $GITHUB_ENV

      - name: Log version
        run: |
          echo $VERSION

      - name: Fail if version is empty
        run: |
          if [ -z "$VERSION" ]; then
            echo "VERSION is empty"
            exit 1
          fi

  pypi:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --with build

      - name: Set package version
        run: |
          poetry version $VERSION

      - name: Build and publish PyPI package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry build
          poetry run twine upload dist/*

  docker:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --with build

      - name: Set package version
        run: |
          poetry version $VERSION

      - name: Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            $VERSION

      - name: Build and publish docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
